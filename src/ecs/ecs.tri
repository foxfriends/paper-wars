module _struct at "trilogy:struct" use name, construct, destruct
module _record at "trilogy:record" use contains, delete
module _set at "trilogy:set" use remove, insert

rule query(entity, [])
rule query(entity, ['ENTITY(entity), ..cs]) <- query(entity, cs)
rule query(entity, [c, ..cs]) <- c in yield 'components(entity) and query(entity, cs)

rule find(q) <-
  entity in yield 'entities
  and query(entity, q)

proc createEntity!() {
  return yield 'createEntity
}

proc destroyEntity!(e) {
  return yield 'destroyEntity(e)
}

proc addComponent(e, component) {
  return yield 'addComponent(e : component)
}

proc deleteComponent(e, componentType) {
  return yield match componentType
    case typeof 'struct then name componentType
    else componentType
}

proc inWorld!(world, body) {
  with {
    return body!()
  }
  when 'entities resume world.'entities
  when 'components(entity) resume [construct k (es.entity) for k : es in world.'components and is contains entity es]
  when 'createEntity invert {
    let id = uuid::v4!()
    world.'entities insert= id
    resume id
  }
  when 'destroyEntity(entity) invert {
    world.'entities remove= id
    for _:cs in world.'components {
      delete!(cs, entity)
    }
  }
  when 'addComponent(entity : component) invert {
    ct : v = destruct component
    world.'components.ct.entity = v
    resume
  }
}

export query, find, createEntity, destroyEntity, addComponent, deleteComponent
